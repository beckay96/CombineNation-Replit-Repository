
export interface FamilyMember {
  id: string;
  name: string;
  email: string;
  relationship: 'Spouse' | 'Child' | 'Guardian';
}

export interface SpouseInfo {
  display_name: string;
  email: string;
  makeParentToChildren: boolean;
}

export interface ChildInfo {
  firstName: string;
  middleName: string;
  lastName: string;
  hasEmail: boolean;
  email: string;
  password: string;
  confirmPassword: string;
  dob: string;
}




import type { Database } from '@/integrations/supabase/types';

export interface UserProfile {
  id: string;
  theme: 'light' | 'dark';
  neon_mode?: boolean;
  created_time?: string;
  last_active_time?: string;
  display_name?: string;
  first_name?: string;
  middle_names?: string;
  last_name?: string;
  dob?: Date;
}

// Database types
export type Tables = Database['public']['Tables'];
export type ProfileRow = Tables['profiles']['Row'];


import React, { createContext, useState, useEffect, ReactNode, useContext } from 'react';
import { supabase } from '@/integrations/supabase/client';

interface ThemeContextType {
  theme: 'light' | 'dark';
  setTheme: (theme: 'light' | 'dark') => void;
}

interface ThemeProviderProps {
  children: ReactNode;
  defaultTheme?: 'light' | 'dark';
  storageKey?: string;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider = ({ children, defaultTheme = 'dark', storageKey = 'neonMode' }: ThemeProviderProps) => {
  const [theme, setTheme] = useState<'light' | 'dark'>(defaultTheme);

  useEffect(() => {
    const fetchUserThemePreference = async () => {
      try {
        const { data: sessionData } = await supabase.auth.getSession();
        const session = sessionData?.session;

        if (session && session.user) {
          const { data, error } = await supabase
            .from('profiles')
            .select('neon_mode')
            .eq('id', session.user.id)
            .single();
          
          if (error) {
            console.error('Error fetching neon/light mode preference:', error);
            return;
          }
          
          if (data && data.neon_mode !== null) {
            setTheme(data.neon_mode ? 'dark' : 'light');
            return;
          }
        }
      } catch (error) {
        console.error('Failed to fetch user neon/light mode preference:', error);
      }

      const storedTheme = localStorage.getItem(storageKey) as 'light' | 'dark';
      if (storedTheme) {
        setTheme(storedTheme);
      } else {
        const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        setTheme(isDark ? 'dark' : 'light');
      }
    };

    fetchUserThemePreference();

    localStorage.setItem(storageKey, theme);
    
    const root = window.document.documentElement;
    
    if (theme === 'dark') {
      root.classList.add('dark');
    } else {
      root.classList.remove('dark');
    }
  }, [theme, storageKey]);

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = (): ThemeContextType => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};






import { useState, useEffect } from 'react';

export function useAuthTabSync(initialTab: string | undefined, accountExists: boolean | undefined) {
  // Default to 'signup' tab for new users, 'login' for returning users
  const [activeTab, setActiveTab] = useState(initialTab || (accountExists ? 'login' : 'signup'));

  // Update local state when the accountExists prop changes
  useEffect(() => {
    if (accountExists !== undefined) {
      setActiveTab(accountExists ? 'login' : 'signup');
    }
  }, [accountExists]);

  // Synchronize with the parent component when the initialTab prop changes
  useEffect(() => {
    if (initialTab && initialTab !== activeTab) {
      setActiveTab(initialTab);
    }
  }, [initialTab, activeTab]);

  // Function to handle tab change and ensure parent component knows about it
  const handleTabChange = (value: string) => {
    setActiveTab(value);
    // We need to synchronize this state with the parent component
    if (typeof window !== 'undefined') {
      // Dispatch a custom event that the parent component can listen for
      const event = new CustomEvent('authTabChange', { detail: { tab: value } });
      window.dispatchEvent(event);
    }
  };

  return { activeTab, handleTabChange };
}















import { useState, useEffect } from 'react';
import { useAuth } from '@/hooks/auth';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

// A more reliable way to check if an account exists
const checkIfAccountExists = async (email: string): Promise<boolean> => {
  try {
    console.log('Checking if account exists for email:', email);
    
    // Check if the email exists in the auth.users table
    // We do this by attempting to sign in with a fake password
    // and checking if the error is "Invalid login credentials" (which means user exists)
    // vs "User not found" (which means user doesn't exist)
    const { error } = await supabase.auth.signInWithPassword({
      email: email,
      password: 'fake-password-for-existence-check',
    });
    
    if (!error) {
      // If no error, the user exists and somehow the password worked (very unlikely)
      console.log('Account exists (and password unexpectedly worked)');
      return true;
    }
    
    // Check the error message to determine if user exists
    if (error.message.includes('Invalid login credentials')) {
      // This means the user exists but password is wrong (which we expect)
      console.log('Account exists (invalid password error)');
      return true;
    } else if (error.message.includes('user not found') || 
               error.message.includes('User not found') || 
               error.message.includes('No user found')) {
      // This means the user doesn't exist
      console.log('Account does not exist (user not found)');
      return false;
    }
    
    // For any other error, assume account might exist
    console.log('Error checking existence, assuming account might exist:', error.message);
    return false;
  } catch (e) {
    console.error('Error checking account existence:', e);
    // If we can't determine, assume it doesn't exist to allow signup attempt
    return false;
  }
};

export function useAuthenticationActions(
  email: string,
  password: string,
  confirmPassword: string,
  displayName: string,
  setStep: (step: number) => void,
  selectedOptionIndex: number | null,
  setIsProcessing: (isProcessing: boolean) => void,
  accountExists: boolean | undefined,
  setAccountExists: (exists: boolean) => void,
  resetFormFields: () => void
) {
  const { toast } = useToast();
  const { signIn, signUp } = useAuth();
  const [isSigningUp, setIsSigningUp] = useState(false);

  // Add debug logging
  useEffect(() => {
    console.log('Authentication state:', { 
      email, 
      displayName, 
      isSigningUp, 
      accountExists 
    });
  }, [email, displayName, isSigningUp, accountExists]);

  const handleSignup = async (e: React.FormEvent) => {
    e.preventDefault();

    // Guard against double submission
    if (isSigningUp) {
      console.log('Already processing signup request');
      return;
    }

    setIsSigningUp(true);
    setIsProcessing(true);

    try {
      // Form validation
      if (!email || !password) {
        throw new Error('Please enter your email and password');
      }

      if (password !== confirmPassword) {
        throw new Error('Passwords do not match');
      }

      console.log('Starting signup process with:', {
        email,
        displayName,
        hasPassword: !!password
      });

      // For signup flow, we'll just directly attempt to sign up
      // without checking if account exists first
      console.log('Creating new account for:', email, 'with display name:', displayName);
      try {
        const userProfile = await signUp(email, password, 'light', displayName);
        console.log('Account created successfully with profile:', userProfile);

        if (!userProfile || !userProfile.id) {
          throw new Error('Profile was not created properly during signup');
        }

        // Show confirmation toast
        toast({
          title: 'Account created',
          description: 'Your account has been created successfully.',
        });

        resetFormFields();

        // Move to the next step after successful signup
        setStep(1); // Personal details step
      } catch (signupError: any) {
        console.error('Detailed signup error:', signupError);

        // Check if the error is because the account already exists
        if (signupError.message && (
          signupError.message.includes('already registered') || 
          signupError.message.includes('already exists') ||
          signupError.message.includes('Email address is already taken')
        )) {
          console.log('Account already exists for this email (from signup error)');
          setAccountExists(true);
          
          // Now we attempt to sign in with the provided credentials
          try {
            console.log('Attempting to sign in with provided credentials');
            await signIn(email, password);
            resetFormFields();
            setStep(1); // Move to next step if login succeeds
          } catch (signInError) {
            console.log('Sign in attempt failed, user needs to try again with correct credentials');
            toast({
              title: 'Account exists',
              description: 'This email is already registered. Please log in instead.',
              variant: 'destructive',
            });
            // Don't rethrow, we'll stay on the login tab
          }
          
          return;
        }

        // If it's any other error, rethrow it
        throw signupError;
      }
    } catch (error) {
      console.error('Signup error:', error);
      let errorMsg = 'Failed to create account. Please try again.';

      if (error instanceof Error) {
        errorMsg = error.message;
      }

      toast({
        title: 'Signup error',
        description: errorMsg,
        variant: 'destructive',
      });
    } finally {
      setIsProcessing(false);
      setIsSigningUp(false);
    }
  };

  return { handleSignup };
}








import { useState } from 'react';
import { useAuth } from '@/hooks/auth';
import { useToast } from '@/hooks/use-toast';
import { useAppState } from '@/hooks/appState/AppStateContext';

export function useOnboardingNavigation(
  step: number,
  setStep: (step: number) => void,
  selectedOptionIndex: number | null,
  getSteps: () => string[]
) {
  const { toast } = useToast();
  const { updateUserProfile } = useAuth();
  const [isUpdatingRole, setIsUpdatingRole] = useState(false);
  const { 
    isAddingSchool, 
    isAddingFamily,
    setSchoolCreatedFully,
    setFamilyFinishedAdding
  } = useAppState();

  const handleOptionSelect = async (optionIndex: number) => {
    console.log('Option selected:', optionIndex);
    try {
      setIsUpdatingRole(true);
      
      // If option is 3 (solo), we'll skip to completion in the parent handler
      if (optionIndex === 3) {
        console.log('Solo option selected, completing onboarding');
        // The completion will be handled by the parent component
      } else if (isAddingFamily) {
        // For family or both options, proceed to the next step (family setup)
        console.log('Family option selected, moving to family setup');
        handleNext();
      } else if (isAddingSchool) {
        // For educator option, proceed to the next step (school setup)
        console.log('Educator option selected, moving to school setup');
        handleNext();
      }
    } catch (error) {
      console.error('Error updating option:', error);
      toast({
        title: 'Error',
        description: 'Failed to update your selection. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsUpdatingRole(false);
    }
  };

  const handleNext = () => {
    const steps = getSteps();
    if (step < steps.length - 1) {
      console.log('Moving to next step:', step + 1);
      setStep(step + 1);
    } else {
      console.log('Completing onboarding, no more steps');
    }
  };

  const handleBack = () => {
    if (step > 0) {
      console.log('Moving to previous step:', step - 1);
      setStep(step - 1);
    }
  };

  return {
    handleOptionSelect,
    handleNext,
    handleBack,
    isUpdatingRole
  };
}






import React, { createContext, useContext, useState, ReactNode } from 'react';

interface AppStateContextType {
  // Onboarding process state
  isAddingSchool: boolean;
  isAddingFamily: boolean;
  familyFinishedAdding: boolean;
  schoolCreatedFully: boolean;
  
  // State setters
  setIsAddingSchool: (value: boolean) => void;
  setIsAddingFamily: (value: boolean) => void;
  setFamilyFinishedAdding: (value: boolean) => void;
  setSchoolCreatedFully: (value: boolean) => void;
}

const AppStateContext = createContext<AppStateContextType | undefined>(undefined);

interface AppStateProviderProps {
  children: ReactNode;
}

export const AppStateProvider: React.FC<AppStateProviderProps> = ({ children }) => {
  // Onboarding process state
  const [isAddingSchool, setIsAddingSchool] = useState(false);
  const [isAddingFamily, setIsAddingFamily] = useState(false);
  const [familyFinishedAdding, setFamilyFinishedAdding] = useState(false);
  const [schoolCreatedFully, setSchoolCreatedFully] = useState(false);

  const value = {
    isAddingSchool,
    isAddingFamily,
    familyFinishedAdding,
    schoolCreatedFully,
    setIsAddingSchool,
    setIsAddingFamily,
    setFamilyFinishedAdding,
    setSchoolCreatedFully,
  };

  return (
    <AppStateContext.Provider value={value}>
      {children}
    </AppStateContext.Provider>
  );
};

export const useAppState = (): AppStateContextType => {
  const context = useContext(AppStateContext);
  
  if (context === undefined) {
    throw new Error('useAppState must be used within an AppStateProvider');
  }
  
  return context;
};












